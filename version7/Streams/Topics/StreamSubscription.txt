What is a StreamSubscription?
 1. A StreamSubscription represents the connection between a Stream and its listener. 
 2. When you listen to a Stream in Dart, youâ€™re returned a StreamSubscription object that allows you to control this relationship.

This subscriotion allows to handle
 1. Start listening to stream data
 2. Pause/resume the listening
 3. Cancel the subscription
 4. Handle incoming data or errors manually
 5. Responding to stream completion


Syntax:
StreamSubscription<T> subscription = stream.listen(
  (T data) {
    // Handle data
  },
  onError: (error) {
    // Handle error
  },
  onDone: () {
    // Stream is finished
  },
  cancelOnError: false, // Optional
);

// Controlling the subscription
subscription.pause(); // Pause receiving events
subscription.resume(); // Resume after pausing
await subscription.cancel(); // Cancel the subscription entirely

// Checking status (Flutter 2.8+)
bool isPaused = subscription.isPaused;




Memory Leaks with StreamSubscription:
ðŸ”´ Why it happens:
If you subscribe to a stream and donâ€™t cancel it when the widget is destroyed (like navigating to a new screen), the stream keeps running in the background.

This causes:
 1. Unnecessary memory usage
 2. Lag
 3. Crashes in large apps


Best Practice: Cancel the Subscription in dispose() method.
 1. When using a StreamSubscription, always cancel it when the widget is disposed.


cancelOnError: true:
 1. You can auto-cancel the stream on error:
